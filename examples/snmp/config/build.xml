<?xml version='1.0'?>
<project name="mongo-hadoop" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
  <property name="ivy.install.version" value="2.2.0" />
  <property name="ivy.jar.dir"         value="${basedir}/ivy" />
  <property name="ivy.jar.file"        value="${ivy.jar.dir}/ivy.jar" />

  <path id="classpath">
    <fileset dir="/home/hadoopuser/hadoop20/lib/">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="/home/hadoopuser/hadoop20/">
      <include name="*.jar"/>
    </fileset>
    <pathelement path="build/main" />
    <pathelement path="build/examples" />
<!--    <pathelement path="build/test" /> -->

  </path>
    
  <target name="download-ivy" description="-->download ivy"> 
    <mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="installing ivy..."/>
      <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
    		   dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>
    
  <!-- ================================= 
        target: install-ivy         
          this target is not necessary if you put ivy.jar in your ant lib directory
          if you already have ivy in your ant lib, you can simply remove this
          target and the dependency the 'go' target has on it
       ================================= -->
  <target name="install-ivy" depends="download-ivy" description="--> install ivy">
    <!-- try to load ivy here from local ivy dir, in case the user has not already dropped
          it into ant's lib dir (note that the latter copy will always take precedence).
          We will not fail as long as local lib dir exists (it may be empty) and
          ivy is in at least one of ant's lib dir or the local lib dir. -->
    <path id="ivy.lib.path">
        <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
              uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>    
  <!-- ================================= 
          target: clean-ivy              
         ================================= -->
	<target name="clean-ivy" description="--> clean the ivy installation">
		<delete dir="${ivy.jar.dir}"/>
	</target>
	
    <!-- ================================= 
          target: clean-cache              
         ================================= -->
	<target name="clean-cache" depends="install-ivy" 
			description="--> clean the ivy cache">
		<ivy:cleancache />
	</target>

  <target name="init" depends="install-ivy">
    <mkdir dir="build" />
    <mkdir dir="build/main" />
<!--    <mkdir dir="build/test" /> -->
    <mkdir dir="build/examples" />
    <mkdir dir="build/examples/wordcount" />
    <mkdir dir="build/examples/snmp"/>
    <mkdir dir="build/examples/treasury"/>
  </target>

  <target name="resolve" depends="init" description="--> retrieve dependencies with ivy">
    <ivy:retrieve/>
  </target>

  <target name="clean" description="--> clean up project">
    <delete dir="build"/>
    <delete file="snmp_test.jar"/>
  </target>

  <target name="compile" depends="init" description="--> compile all artifacts">

    <javac srcdir="src/main"
           destdir="build/main"
           optimize="off"
           deprecation="off"
           source="1.5"
           target="1.5"
           encoding="ISO-8859-1"
           memoryMaximumSize="256M"
           fork="true"
           debug="on" >
      <classpath refid="classpath"/>
    </javac>

<!--
    <javac srcdir="src/test"
           destdir="build/test"
           optimize="off"
           deprecation="off"
           source="1.5"
           encoding="ISO-8859-1"
           debug="on" >
      <classpath refid="classpath"/>
    </javac>
-->

  <javac srcdir="examples/wordcount/src"
           destdir="build/examples/wordcount"
           optimize="off"
           deprecation="off"
           source="1.5"
           encoding="ISO-8859-1"
           debug="on" >
      <classpath refid="classpath"/>
  </javac>
  <javac srcdir="examples/treasury_yield/src"
           destdir="build/examples/treasury/"
           optimize="off"
           deprecation="off"
           source="1.5"
           encoding="ISO-8859-1"
           debug="on" >
      <classpath refid="classpath"/>
  </javac>
  <javac srcdir="examples/snmp"
           destdir="build/examples/snmp"
           optimize="off"
           deprecation="off"
           source="1.5"
           encoding="ISO-8859-1"
           debug="on" >
      <classpath refid="classpath"/>
  </javac>


  </target>

  <target name="word" depends="jar" description="--> Run the wordcount example">
    <java classname="WordCount" >
      <classpath refid="classpath"/>
    </java>
  </target>

  <target name="wordcount" depends="word"/>

  <target name="wordcountXML" depends="jar" description="--> Run the wordcount example">
    <java classname="com.mongodb.hadoop.examples.WordCountXMLConfig" >
      <classpath refid="classpath"/>
      <arg line="-conf examples/wordcount/resources/mongo-wordcount.xml"/>
      <arg line="-Dlog4j.debug"/>
    </java>
  </target>

  <target name="yieldXML" depends="jar" description="--> Run the treasury yield historical example">
    <java classname="com.mongodb.hadoop.examples.TreasuryYieldXMLConfig" >
      <classpath refid="classpath"/>
      <arg line="-conf examples/treasury_yield/resources/mongo-treasury_yield.xml"/>
      <arg line="-Dlog4j.debug"/>
    </java>
  </target>

  <target name="jar" depends="compile">
    <jar destfile="snmp_test.jar">
      <fileset dir="build/main"
         includes="**/*.class" />
      <fileset dir="build/examples"
         includes="**/*.class" />
   </jar>
  </target>

</project>
